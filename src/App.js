import React, { useState, useEffect } from 'react';\nimport './index.css';\n\n// Components\nimport MoodleAuth from './components/MoodleAuth';\nimport CourseList from './components/CourseList';\nimport QuizInterface from './components/QuizInterface';\nimport TeacherChat from './components/TeacherChat';\nimport ConnectionStatus from './components/ConnectionStatus';\n\n// Services\nimport MoodleAPI from './services/MoodleAPI';\nimport { OfflineManager } from './services/OfflineManager';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [currentView, setCurrentView] = useState('login'); // login, courses, quiz, chat\n  const [selectedCourse, setSelectedCourse] = useState(null);\n  const [selectedQuiz, setSelectedQuiz] = useState(null);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [syncStatus, setSyncStatus] = useState('idle');\n  \n  // Service instances\n  const [moodleAPI] = useState(() => new MoodleAPI('gs.teebase.net'));\n  const [offlineManager] = useState(() => new OfflineManager());\n\n  // Initialize app\n  useEffect(() => {\n    initializeApp();\n    setupOnlineStatusListener();\n  }, []);\n\n  const initializeApp = async () => {\n    try {\n      await offlineManager.initialize();\n      console.log('App initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize app:', error);\n    }\n  };\n\n  const setupOnlineStatusListener = () => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      handleBackOnline();\n    };\n    \n    const handleOffline = () => {\n      setIsOnline(false);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  };\n\n  const handleBackOnline = async () => {\n    try {\n      setSyncStatus('syncing');\n      await offlineManager.syncPendingData();\n      setSyncStatus('completed');\n      setTimeout(() => setSyncStatus('idle'), 2000);\n    } catch (error) {\n      console.error('Failed to sync pending data:', error);\n      setSyncStatus('idle');\n    }\n  };\n\n  const handleLogin = async (formData) => {\n    try {\n      console.log('App.handleLogin called with:', formData);\n      \n      // Force demo mode for now - always succeed with demo credentials\n      console.log('Using demo mode authentication');\n      \n      const result = await moodleAPI.authenticateDemo(formData.email);\n      \n      setUser(result.user);\n      setCurrentView('courses');\n      \n      console.log('Demo login successful:', result.user);\n      return { success: true };\n      \n    } catch (error) {\n      console.error('Login error:', error);\n      return { \n        success: false, \n        error: 'Login failed. Please try again.' \n      };\n    }\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    setCurrentView('login');\n    setSelectedCourse(null);\n    setSelectedQuiz(null);\n    moodleAPI.setToken(null);\n  };\n\n  const handleCourseSelect = (course) => {\n    setSelectedCourse(course);\n  };\n\n  const handleQuizStart = (quiz) => {\n    setSelectedQuiz(quiz);\n    setCurrentView('quiz');\n  };\n\n  const handleQuizComplete = () => {\n    setCurrentView('chat');\n  };\n\n  const handleBackToCourses = () => {\n    setCurrentView('courses');\n    setSelectedCourse(null);\n    setSelectedQuiz(null);\n  };\n\n  const handleBackToQuiz = () => {\n    setCurrentView('quiz');\n  };\n\n  // Render current view\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'login':\n        return (\n          <MoodleAuth \n            onLogin={handleLogin}\n            defaultServer=\"gs.teebase.net\"\n          />\n        );\n        \n      case 'courses':\n        return (\n          <CourseList\n            user={user}\n            moodleAPI={moodleAPI}\n            offlineManager={offlineManager}\n            selectedCourse={selectedCourse}\n            onCourseSelect={handleCourseSelect}\n            onQuizStart={handleQuizStart}\n            onLogout={handleLogout}\n            isOnline={isOnline}\n          />\n        );\n        \n      case 'quiz':\n        return (\n          <QuizInterface\n            quiz={selectedQuiz}\n            user={user}\n            moodleAPI={moodleAPI}\n            offlineManager={offlineManager}\n            onComplete={handleQuizComplete}\n            onBack={handleBackToCourses}\n            isOnline={isOnline}\n          />\n        );\n        \n      case 'chat':\n        return (\n          <TeacherChat\n            quiz={selectedQuiz}\n            course={selectedCourse}\n            user={user}\n            moodleAPI={moodleAPI}\n            offlineManager={offlineManager}\n            onClose={handleBackToCourses}\n            isOnline={isOnline}\n          />\n        );\n        \n      default:\n        return <div>Loading...</div>;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <ConnectionStatus \n        isOnline={isOnline} \n        syncStatus={syncStatus} \n      />\n      \n      {renderCurrentView()}\n    </div>\n  );\n}\n\nexport default App;"